# -*- coding: utf-8 -*-
"""TP Pilas y colas

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JI8xk-alNumEMOndAxBjfCtcBqQQi0tj
"""

# Una pila es una estructura de datos que permite almacenar y recuperar datos siendo el modo de acceso 
# a sus elementos de tipo LIFO ( Last in , First out)
class Pila:
  # Constructor del TDA Pila
  def __init__(self, startStack = None):
    self.pila = []
    if startStack:
      for elemento in startStack:
        self.pila.append(elemento)

  # Imprime por pantalla la pila
  def __repr__(self):
    return str(self.pila)

  # Vacia la pila
  def empty(self):
    self.pila.clear()

  # Agrega un elemento a la pila
  def push(self, elemento):
    self.pila.append(elemento)

  # Saca un elemento de la pila
  def pop(self):
    self.pila.pop()

  # Clona la pila
  def clonar(self):
    nuevaPila = Pila()
    for i in self.pila:
      nuevaPila.push(i)
    return nuevaPila

  # Devuelve el tamaño de la pila
  def tamanio(self):
    return len(self.pila)

  # Indica si la pila esta vacia
  def estaVacia(self):
    return len(self.pila) == 0

 # Devuelve el primer elemento de la pila
  def primerElemento(self):
    dato = None
    if (not self.estaVacia()):
      dato = self.pila[len(self.pila) - 1]
    return dato

 # Una cola es una estructura de datos en la que la operacion de insercion de elementos se realiza por un extremo
 # y la operacion de extraccion por el otro (first in , first out)
class Queue:
  # Constructor del TDA cola
  def __init__(self, startQueue = None):
    self.cola = []
    if startQueue:
      for elemento in startQueue:
        self.cola.append(elemento)

  # Imprime la cola por pantalla      
  def __repr__(self):
    return str(self.cola)

  # Vacia la cola   
  def empty(self):
    self.cola.clear()

  # Indica si la cola esta vacia  
  def isEmpty(self):
    return len(self.cola) == 0

  # Agrega un elemento a la cola  
  def enqueue(self, elemento):
    self.cola.insert(0,elemento)

  # Elimina un elemento de la cola  
  def dequeue(self):
    dato = None
    if not self.isEmpty():
      dato = self.cola.pop()
    return dato

  # Devuelve el primer elemento de la cola  
  def top(self):
    dato = None
    if not self.isEmpty():
      dato = self.cola[len(self.cola)-1]
    return dato

  # Clona la cola
  def clonar(self):
    nuevaQueue = []
    for i in self.cola:
      nuevaQueue.append(i)
    return nuevaQueue
    
  # Devuelve el tamaño de la cola  
  def tamanio(self):
    return len(self.cola)

from enum import Enum
# Tipo de genero del libro 
class GeneroLibro(int,Enum):
  Teatro = 0
  Poesia = 1
  Narracion = 2

# Tipo del libro
class TipoLibro(int,Enum):
  Nacional = 0
  Internacional = 1

Teatro = GeneroLibro.Teatro
Poesia = GeneroLibro.Poesia
Narracion = GeneroLibro.Narracion

Nacional = TipoLibro.Nacional
Internacional = TipoLibro.Internacional

# Valida el cogido del libro 
def validarCodigo(codigo):
  if not (len(codigo) == 8 and codigo[0:3].isalpha() and codigo[3:8].isnumeric()):
    raise Exception ('Codigo incorrecto')
  else: 
    return codigo

# Valida el genero del libro 
def validarGenero(genero):
  if not isinstance(genero, GeneroLibro):
    raise Exception ('Genero incorrecto')
  else:
    return genero
    
# Valida el tipo del libro 
def validarTipo(tipo):
  if not isinstance(tipo, TipoLibro):
    raise Exception ('El tipo del libro es incorrecto')
  else:
    return tipo

# TDA libro
class Libro:
  # Constructor TDA libro
  def __init__(self, codigo = "AAA12345", genero = Teatro, tipo = Nacional):
    self.codigo = validarCodigo(codigo)
    self.genero = validarGenero(genero)
    self.tipo = validarTipo(tipo)
    
  # Imprime el libro por pantalla con su codigo , genero y tipo 
  def __repr__(self):
    cadenaPrint = str(self.codigo) + '\n' + str(self.genero.name) + '\n' + str(self.tipo.name) 
    return cadenaPrint

# TDA estanteria
class Estanteria:
  # Constructor de TDA estanteria
  def __init__(self, numeroIdentificacion = 0, cantidadCritica = 50):
    self.numeroIdentificacion = numeroIdentificacion
    self.cantidadCritica = cantidadCritica
    self.pilaNacional = Pila()
    self.pilaInternacional = Pila()

    # Valida el numero de identificacion de la estanteria 
    if (numeroIdentificacion > 0 and numeroIdentificacion < 999):
      self.numeroIdentificacion = numeroIdentificacion
    else:
      raise Expection ("Numero de identificacion no valido")

  # Imprime la estanteria por pantalla con su numero de identificacion
  def __repr__(self):
    cadenaPrint = str(self.numeroIdentificacion)
    return cadenaPrint

  # Guarda un libro en la estanteria, dependiendo del tipo de libro lo guardara 
  # en pila nacional o pila internacional.
  def guardarLibro(self,libro):
    if (libro != None and libro.tipo == Nacional):
      self.pilaNacional.push(libro) 
      if (self.pilaNacional.tamanio() >= 50):
        print("La pila excedio la cantidad critica")
    else:
      self.pilaInternacional.push(libro) 
      if (self.pilaInternacional.tamanio() >= 50):
        print("La pila excedio la cantidad critica")
       
  # Devuelve el primer libro disponible. Si hay libros en pila nacional devuelve el primero
  # de pila nacional, sino devuelve el primero de pila internacional
  def primerLibroDisponible(self):
    if(not self.pilaNacional.estaVacia()):
      return self.pilaNacional.primerElemento()
    elif (not self.pilaInternacional.estaVacia()):
      return self.pilaInternacional.primerElemento()
    else:
      raise Exception("La estanteria esta vacia")  

  # Desapila libros hasta encontrar un libro de generoDeLibro, cuando lo encuentra lo saca 
  # y vuelve a apilar la pila, pero sin el libro recomendado.
  # Primero busca en pila nacional y si no lo encuentra busca en pila internacional
  def libroParaRecomendar(self, generoDeLibro):
    nacionalAux = Pila()
    internacionalAux = Pila()
    libroEncontrado = False
    libroGuardado = None

    while (not self.pilaNacional.estaVacia() and libroEncontrado == False):
      libro = self.pilaNacional.primerElemento()
      if (libro.genero == generoDeLibro):
        libroGuardado = libro
        self.pilaNacional.pop()
        libroEncontrado = True
      else:
        nacionalAux.push(libro)
        self.pilaNacional.pop()
    
    while (not nacionalAux.estaVacia()):
      libro = nacionalAux.primerElemento()
      self.pilaNacional.push(libro)
      nacionalAux.pop()    

    while (not self.pilaInternacional.estaVacia() and libroEncontrado == False):
      libro = self.pilaInternacional.primerElemento()
      if (libro.genero == generoDeLibro):
        libroEncontrado = libro
        self.pilaInternacional.pop()
        libroEncontrado = True
      else:
        internacionalAux.push(libro)
        self.pilaInternacional.pop()

    while (not internacionalAux.estaVacia()):
      libro = internacionalAux.primerElemento()
      self.pilaInternacional.push(libro)
      internacionalAux.pop() 

    if (libroEncontrado == True):
      return libroGuardado
    else:
      return libroGuardado

  # Busca el libro con el mismo codigoLibro y cuando lo encuentra devuelve el libro. En este caso no desapilamos la pila
  # Utilizamos listas clonadas de nacional e internacional.
  def buscarLibro(self,codigoLibro):
    internacionalClonada = self.pilaInternacional.clonar()
    nacionalClonada = self.pilaNacional.clonar()
    libroEncontrado = False
    libroBuscado = None

    while (not nacionalClonada.estaVacia() and libroEncontrado == False):
      libro = nacionalClonada.primerElemento()
      if (libro.codigo == codigoLibro):
        libroEncontrado = True
        libroBuscado = libro
      else:
        nacionalClonada.pop()  

    while (not internacionalClonada.estaVacia() and libroEncontrado == False):
      libro = internacionalClonada.primerElemento()
      if (libro.codigo == codigoLibro):
        libroEncontrado = True
        libroBuscado = libro
      else:
        internacionalClonada.pop() 

    if (libroEncontrado == True):
      return libroBuscado
    else:
      return None

  # Desapila libros hasta encontrar un libro con el mismo codigo de codigoLibro , cuando lo encuentra lo saca y vuelve a apilar la pila.
  # Primero busca en pila nacional y si no lo encuentra busca en pila internacional
  def prestarLibro(self, codigoLibro):
    nacionalAux = Pila()
    internacionalAux = Pila()
    libroEncontrado = False
    libroGuardado = None

    while (not self.pilaNacional.estaVacia() and libroEncontrado == False):
      libro = self.pilaNacional.primerElemento()
      if (libro.codigo == codigoLibro):
        libroGuardado = libro
        self.pilaNacional.pop()
        libroEncontrado = True
      else:
        nacionalAux.push(libro)
        self.pilaNacional.pop()
    
    while (not nacionalAux.estaVacia()):
      libro = nacionalAux.primerElemento()
      self.pilaNacional.push(libro)
      nacionalAux.pop()    

    while (not self.pilaInternacional.estaVacia() and libroEncontrado == False):
      libro = self.pilaInternacional.primerElemento()
      if (libro.codigo == codigoLibro):
        libroGuardado = libro
        self.pilaInternacional.pop()
        libroEncontrado = True
      else:
        internacionalAux.push(libro)
        self.pilaInternacional.pop()

    while (not internacionalAux.estaVacia()):
      libro = internacionalAux.primerElemento()
      self.pilaInternacional.push(libro)
      internacionalAux.pop() 

    if (libroEncontrado == True):
      return libroGuardado
    else:
      return libroGuardado

  # Devuelve la cantidad de libro de tipo nacional e internacional de la pila
  def librosPorTipo(self):
    print("Cantidad nacional de libros: ", self.pilaNacional.tamanio())
    print("Cantidad internacional de libros: ", self.pilaInternacional.tamanio())

  # Devuelve la cantidad total de libros de la estanteria 
  def cantidadTotalLibros(self):
    cantidadNacional = self.pilaNacional.tamanio()
    cantidadInternacional = self.pilaInternacional.tamanio()
    sumaTotal = cantidadNacional + cantidadInternacional
    return sumaTotal

  # Indica si la cantidad total de libros de la estanteria es mayor a su cantidad critica
  def esCritica(self):
    return (self.cantidadCritica < self.pilaNacional.tamanio() or self.cantidadCritica < self.pilaInternacional.tamanio() )
    
  # Devuelve la cantidad de libros del genero generoLibro que hay en la estanteria
  def librosPorGenero(self,generoLibro):
    nacionalClonada = self.pilaNacional.clonar()
    internacionalClonada = self.pilaInternacional.clonar()
    cantidad = 0
    while (not nacionalClonada.estaVacia()):
      libro = nacionalClonada.primerElemento()
      if (libro.genero  == generoLibro):
        cantidad += 1
      nacionalClonada.pop()
    while (not internacionalClonada.estaVacia()):
      libro = internacionalClonada.primerElemento()
      if (libro.genero  == generoLibro):
        cantidad += 1
      internacionalClonada.pop() 

    print("La cantidad de libros de", generoLibro, "es: ", cantidad)

import numpy as np

# TDA escritorio
class EscritorioDeAtencion:
  # Constructor del TDA escritorio
  def __init__(self, filas = 0, columnas = 0):
    self.filas = filas
    self.columnas = columnas
    self.matriz = np.empty((self.filas, self.columnas), dtype=Estanteria)

  # Devuelve la estanteria que se encuentra en la posicion de la matriz[fila , columna]
  def getEstanteria(self, fila, col):
    return self.matriz[fila][col]

  # Imprime el escritorio por pantalla en forma de matriz. Se observa que donde hay una estanteria
  # se la distingue por su numero de identificacion.
  def __repr__(self):
    cadenaPrint = str(self.matriz)
    return cadenaPrint 

  # Establece una estanteria en la posicion de la matriz[nroFila, nroColumna]
  def establecerEstanteria(self,nroFila, nroColumna, estanteria):
    self.matriz[nroFila,nroColumna] = estanteria

  # Devuelve la cantidad de estanterias criticas que se encuentran en la fila nroFila
  def cantidadDeEstanteriasCriticas(self, nroFila):
    cantidad = 0
    for i in range(len(self.matriz[0])):
      if (i == nroFila):
        for j in range(len(self.matriz)):
          estanteriaActual = self.matriz[i,j]
          if (estanteriaActual != None and estanteriaActual.esCritica()):
            cantidad += 1
    return cantidad
          
  # Devuelve la estanteria con menor cantidad total de libros , que se encuentran en el escritorio
  def estanteriaMenosRecargada(self):
    estanteriaMenosCargada = None
    for i in range(len(self.matriz[0])):
      for j in range(len(self.matriz)):
        estanteriaActual = self.matriz[i,j]
        if (estanteriaMenosCargada == None):
          estanteriaMenosCargada = estanteriaActual
        elif (estanteriaActual != None and estanteriaActual.cantidadTotalLibros() < estanteriaMenosCargada.cantidadTotalLibros()):
          estanteriaMenosCargada = estanteriaActual
    return estanteriaMenosCargada

  # Devuelve la posicion de la estanteria buscada con el nroEstanteria
  def buscaEstanteria(self,nroEstanteria):     
    for i in range(len(self.matriz[0])):
      for j in range(len(self.matriz)):
        estanteriaActual = self.matriz[i,j]
        if (estanteriaActual != None and estanteriaActual.numeroIdentificacion == nroEstanteria):
          return [i,j]

  # Guarda una cola de libros en la estanteria menos cargada , teniendo en cuenta que a medida que carga libros 
  # la estanteria menos cargada puede cambiar 
  def guardarLibros(self,colaDelibros = Queue()):
    while (not colaDeLibros.isEmpty()):
      estanteriaMenosCargadaActual = self.estanteriaMenosRecargada()
      primerLibroCola = colaDeLibros.top()
      estanteriaMenosCargadaActual.guardarLibro(primerLibroCola)
      colaDeLibros.dequeue()

  # Mueve el libro con codigo codigoLibro de la estanteria con numero de identificacion nroEstanteriaOrigen , a la estanteria
  # con numero de identificacion nroEstanteriaDestino
  def moverLibro(self,codigoLibro, nroEstanteriaOrigen, nroEstanteriaDestino):   
    libroAMover = None 
    for i in range(len(self.matriz[0])):
      for j in range(len(self.matriz)):
        estanteriaActual = self.matriz[i,j]
        if (estanteriaActual != None and estanteriaActual.numeroIdentificacion == nroEstanteriaOrigen):
          if (estanteriaActual.buscarLibro(codigoLibro) != None):
            libroAMover = estanteriaActual.prestarLibro(codigoLibro)

    for i in range(len(self.matriz[0])):
      for j in range(len(self.matriz)):
        estanteriaActual = self.matriz[i,j]
        if (estanteriaActual != None and estanteriaActual.numeroIdentificacion == nroEstanteriaDestino):
          estanteriaActual.guardarLibro(libroAMover)      
             
  # Saca los libros de la cola colaDeLibros ingresados por parametros devolviendo los libros sacados
  def sacarLibros(self, colaDelibros):
    librosSacados = Pila()
    while (not colaDeLibros.isEmpty()):
      primerLibro = colaDeLibros.top()
      primerCodigoLibro = primerLibro.codigo
      for i in range(len(self.matriz[0])):
        for j in range(len(self.matriz)):
          estanteriaActual = self.matriz[i,j]
          if (estanteriaActual != None and estanteriaActual.buscarLibro(primerCodigoLibro) != None):
            librosSacados.push(estanteriaActual.buscarLibro(primerCodigoLibro))
            estanteriaActual.prestarLibro(primerCodigoLibro)
      colaDeLibros.dequeue()
    return librosSacados

##################### PRUEBAS ####################################
libro1 = Libro('ABC00001', Poesia, Nacional)
libro2 = Libro('ABC00002', Narracion, Nacional)
libro3 = Libro('ABC00003', Teatro, Nacional)

libro4 = Libro('ABC00004', Poesia, Nacional)
libro5 = Libro('ABC00005', Narracion, Nacional)
libro6 = Libro('ABC00006', Teatro, Nacional)

libro7 = Libro('ABC00007', Poesia, Nacional)
libro8 = Libro('ABC00008', Narracion, Nacional)
libro9 = Libro('ABC00009', Teatro, Nacional)

libro10 = Libro('ABC00010', Poesia, Nacional)
libro11 = Libro('ABC00011', Narracion, Nacional)
libro12 = Libro('ABC00012', Teatro, Nacional)

libro14 = Libro('ABC00013', Poesia, Nacional)
libro15 = Libro('ABC00014', Narracion, Nacional)
libro16 = Libro('ABC00015', Teatro, Internacional)

libro17 = Libro('ABC00016', Poesia, Internacional)
libro18 = Libro('ABC00017', Narracion, Internacional)
libro19 = Libro('ABC00018', Teatro, Internacional)

libro20 = Libro('ABC00019', Poesia, Internacional)
libro21 = Libro('ABC00020', Narracion, Internacional)
libro22 = Libro('ABC00021', Teatro, Internacional)

libro23 = Libro('ABC00022', Poesia, Internacional)
libro24 = Libro('ABC00023', Narracion, Internacional)
libro25 = Libro('ABC00024', Teatro, Internacional)

libro26 = Libro('ABC00025', Poesia, Internacional)
libro27 = Libro('ABC00026', Narracion, Internacional)
libro28 = Libro('ABC00027', Teatro, Internacional)

libro29 = Libro('ABC00028', Poesia, Internacional)
libro13 = Libro('ABC00029', Narracion, Internacional)

estanteria1 = Estanteria(100)
estanteria1.guardarLibro(libro1)
estanteria1.guardarLibro(libro29)
estanteria1.guardarLibro(libro2)
estanteria1.guardarLibro(libro28)
estanteria1.guardarLibro(libro3)
estanteria1.guardarLibro(libro27)
estanteria1.guardarLibro(libro4)
estanteria1.guardarLibro(libro26)
estanteria1.guardarLibro(libro5)

estanteria2 = Estanteria(200)
estanteria2.guardarLibro(libro6)
estanteria2.guardarLibro(libro25)
estanteria2.guardarLibro(libro7)
estanteria2.guardarLibro(libro24)
estanteria2.guardarLibro(libro8)
estanteria2.guardarLibro(libro23)
estanteria2.guardarLibro(libro9)
estanteria2.guardarLibro(libro22)
estanteria2.guardarLibro(libro10)

estanteria3 = Estanteria(300)
estanteria3.guardarLibro(libro11)
estanteria3.guardarLibro(libro21)
estanteria3.guardarLibro(libro12)
estanteria3.guardarLibro(libro20)
estanteria3.guardarLibro(libro13)
estanteria3.guardarLibro(libro19)
estanteria3.guardarLibro(libro14)
estanteria3.guardarLibro(libro18)
estanteria3.guardarLibro(libro15)
estanteria3.guardarLibro(libro17)
estanteria3.guardarLibro(libro16)

print('################################### PRUEBAS ESTANTERIA ###################################')
print()
print('Cantidad total de libros de la estanteria 1: ', estanteria1.cantidadTotalLibros())
print('Cantidad total de libros de la estanteria 2: ', estanteria2.cantidadTotalLibros())
print('Cantidad total de libros de la estanteria 3: ', estanteria3.cantidadTotalLibros())
print()
print('Primer libro disponible de estanteria 1:')
estanteria1.primerLibroDisponible()
print('Primer libro disponible de estanteria 2:')
estanteria2.primerLibroDisponible()
print('Primer libro disponible de estanteria 3:')
estanteria3.primerLibroDisponible()
print()
print('Libro para recomendar de la estanteria 1: ', estanteria1.libroParaRecomendar(Poesia))
print('Libro para recomendar de la estanteria 2: ', estanteria2.libroParaRecomendar(Teatro))
print('Libro para recomendar de la estanteria 3: ', estanteria3.libroParaRecomendar(Teatro))
print()
print('Cantidad total de libros de la estanteria 1: ', estanteria1.cantidadTotalLibros())
print('Cantidad total de libros de la estanteria 2: ', estanteria2.cantidadTotalLibros())
print('Cantidad total de libros de la estanteria 3: ', estanteria3.cantidadTotalLibros())
print()
print('El libro se encuentra en la estanteria 1: ', estanteria1.buscarLibro('ABC00005'))
print('El libro se encuentra en la estanteria 2: ', estanteria2.buscarLibro('ABC00010'))
print('El libro se encuentra en la estanteria 3: ', estanteria3.buscarLibro('ABC00055')) 
print()
print('Prestar libro de la estanteria 1: ', estanteria1.prestarLibro('ABC00001'))
print('Prestar libro de la estanteria 2: ', estanteria2.prestarLibro('ABC00023'))
print('Prestar libro de la estanteria 3: ', estanteria3.prestarLibro('ABC00017'))
print()
print('Estanteria 1')
estanteria1.librosPorTipo()
print('Estanteria 2')
estanteria2.librosPorTipo()
print('Estanteria 3')
estanteria3.librosPorTipo()
print()
print('Es critica estanteria 1: ', estanteria1.esCritica())
print('Es critica estanteria 2: ', estanteria2.esCritica())
print('Es critica estanteria 3: ', estanteria3.esCritica())
print()
estanteria1.librosPorGenero(Poesia)
estanteria2.librosPorGenero(Teatro)
estanteria3.librosPorGenero(Narracion)
print()
print('################################### PRUEBAS ESCRITORIO ###################################')
print()
escritorio1 = EscritorioDeAtencion(4,4)  
escritorio1.establecerEstanteria(2,2,estanteria1)
escritorio1.establecerEstanteria(3,2,estanteria2)
escritorio1.establecerEstanteria(1,3,estanteria3)
print(escritorio1.matriz)
libro30 = Libro('ABC00030', Poesia, Internacional)
libro31 = Libro('ABC00031', Narracion, Internacional)
libro32 = Libro('ABC00032', Teatro, Internacional)
libro33 = Libro('ABC00033', Poesia, Internacional)
libro34 = Libro('ABC00034', Narracion, Internacional)
libro35 = Libro('ABC00035', Teatro, Internacional)
colaDeLibros = Queue()
colaDeLibros.enqueue(libro30)
colaDeLibros.enqueue(libro31)
colaDeLibros.enqueue(libro32)
colaDeLibros.enqueue(libro33)
colaDeLibros.enqueue(libro34)
colaDeLibros.enqueue(libro35)
print()
print('La estanteria menos cargada del escritorio 1 es: ', escritorio1.estanteriaMenosRecargada().numeroIdentificacion)
print()
escritorio1.buscaEstanteria(300)
print()
print('Cantidad de libros de la estanteria 1: ', estanteria1.cantidadTotalLibros())
print('Cantidad de libros de la estanteria 2: ', estanteria2.cantidadTotalLibros())
print('Cantidad de libros de la estanteria 3: ', estanteria3.cantidadTotalLibros())
print()
escritorio1.guardarLibros(colaDeLibros)
print('Luego de la funcion guardarLibros')
print('Cantidad de libros de la estanteria 1: ', estanteria1.cantidadTotalLibros())
print('Cantidad de libros de la estanteria 2: ', estanteria2.cantidadTotalLibros())
print('Cantidad de libros de la estanteria 3: ', estanteria3.cantidadTotalLibros()) 
print()
escritorio1.moverLibro('ABC00003', 100, 300)
print()
print('Luego de la funcion moverLibro. Pasa 1 libro de la estanteria 1 a la 3')
print('Cantidad de libros de la estanteria 1: ', estanteria1.cantidadTotalLibros())
print('Cantidad de libros de la estanteria 2: ', estanteria2.cantidadTotalLibros())
print('Cantidad de libros de la estanteria 3: ', estanteria3.cantidadTotalLibros()) 
print()
colaDeLibros = Queue()
colaDeLibros.enqueue(libro3)
colaDeLibros.enqueue(libro21)
colaDeLibros.enqueue(libro10)
print('Luego de ejecutar la funcion sacarLibros')
print(escritorio1.sacarLibros(colaDeLibros))
print('Cantidad de libros de la estanteria 1: ', estanteria1.cantidadTotalLibros())
print('Cantidad de libros de la estanteria 2: ', estanteria2.cantidadTotalLibros())
print('Cantidad de libros de la estanteria 3: ', estanteria3.cantidadTotalLibros())

#from TP_pilas_y_colas_2021 import *
################################################################################
###########################SCRIPT DE PRUEBA#####################################
################################################################################

#############################IMPORTANTE!!!!!!###################################
#############COSAS PARA CONTROLAR ANTES DE EJECUTAR ESTA PRUEBA#################
#############################IMPORTANTE!!!!!!###################################

#Si usan Enums, los tienen que definir asi (respetar nombres y numeros asociados a cada uno):
#class GeneroLibro(int,Enum):
#  Teatro = 0
#  Poesia = 1
#  Narracion = 2
#class TipoLibro(int,Enum):
#  Nacional = 0
#  Internacional = 1

#En la parte donde se cargan los datos de las Estanterías: Comenten o descomenten los
#bloques de codigo indicados, segun usen o no usen Enums en sus implementaciones

#Orden de variables en constructores (__init__):
#TDA Libro: self, codigo, genero, tipo
#TDA Estanteria: self, numero, cantCritica
#TDA EscritorioDeAtencion: self, cantFilas, cantColumnas

#Mantengan nombres de TDAs, operaciones y orden de parametros en las operaciones
#segun lo que esta definido en el enunciado

#Para ver mejor la salida pueden comentar la parte que imprime cuando la Estanteria 
#llega a la cantidad critica en la operacion guardarLibro

########################Definicion de variables#################################
#################IMPORTANTE: NO MODIFICAR ESTAS VARIABLES!!!!!!!!!!!!!!!!!!!!!!!
nroFilas = 10
nroColumnas = 10
generos = ["Teatro","Poesia","Narracion"]
tipos = ["Nacional","Internacional"]
estanteriasData = {}
primerosLibrosPorEstanteria = {}
primerosLibrosDeNarracion = {}

################################################################################
###########Creacion de escritorio y carga de estanterias########################
################################################################################

####################Lectura de archivo con datos de libros######################
librosFile = open('TP_pilasColas_datosPrueba_2021.csv')
for libro in librosFile:
  libroData = libro[:-1].split(',')
  numero = int(libroData[0])
  if numero in estanteriasData:
    estanteriasData[numero][1].append(libroData[4:7])
  else:
    estanteriasData[numero] = []
    estanteriasData[numero].append(libroData[1:4])
    estanteriasData[numero].append([libroData[4:7]])
librosFile.close() 

################################################################################

######################Creacion de escritorio####################################
escritorioDeAtencion = EscritorioDeAtencion(nroFilas, nroColumnas)
################################################################################

######################Carga de estanterias######################################
for numero in estanteriasData:
  estanteriaData = estanteriasData[numero][0]
  cantCritica = int(estanteriaData[0])
  nroFila = int(estanteriaData[1])
  nroColumna = int(estanteriaData[2])

  ############Creacion de estanteria################
  estanteria = Estanteria(numero, cantCritica)
  
  ############Carga de libros a estanteria########
  for libroData in estanteriasData[numero][1]:
    codigo = libroData[0]
    
    ###################Para uso con Enum########################################
    genero = GeneroLibro(generos.index(libroData[2]))                           ###Comentar si usan strings 
    tipo = TipoLibro(tipos.index(libroData[1]))                                 ###Comentar si usan strings
    ############################################################################

    ###################Para uso con strings#####################################
    #genero = libroData[2]                                                      ###Comentar si usan Enums
    #tipo = libroData[1]                                                        ###Comentar si usan Enums
    ############################################################################

    ##############Creacion de libro#########################
    libro = Libro(codigo, genero, tipo)                                         ###Comentar si usan TDA para codigo
    #libro = Libro(CodigoLibro(codigo[0:3],codigo[3:8]), genero, tipo)          ###Comentar si usan string para codigo
    ##############Guardo libro en estanteria##################
    estanteria.guardarLibro(libro)
  
  ################Ubicacion de estanteria en deposito####################
  escritorioDeAtencion.establecerEstanteria(nroFila, nroColumna, estanteria)



  ##############################################################################
  ##########Ejecucion de pruebas de operaciones de TDA Estanteria###############
  ##############################################################################

  ##########################primerLibroDisponible###############################
  primerosLibrosPorEstanteria[numero] = estanteria.primerLibroDisponible()

  ##########################libroParaRecomendar#################################
  #####################Para uso con Enum########################################
  libroARecomendar = estanteria.libroParaRecomendar(GeneroLibro(generos.index("Narracion")))      ###Comentar si usan strings
  ##############################################################################

  #####################Para uso con strings#####################################
  #libroARecomendar = estanteria.libroParaRecomendar("Narracion")                                 ###Comentar si usan Enums
  ##############################################################################

  primerosLibrosDeNarracion[numero] = libroARecomendar
  estanteria.guardarLibro(libroARecomendar)
################################################################################

#####################Impresion de escritorio de atencion########################
print("Depósito de estanterías de escritorio de atención:\n")
print(escritorioDeAtencion)
print("-----------------------------------------------------------------------\n")

################################################################################
############Impresion de pruebas de operaciones de TDA Estanteria###############
################################################################################

for numero in primerosLibrosPorEstanteria:
  ##########################primerAuxilioAEnviar################################
  print("Primer libro disponible en estanteria", numero, ":", primerosLibrosPorEstanteria[numero])
  
  ##########################libroParaRecomendar#################################
  print("Libro de género Narracion para recomendar en estanteria", numero, ":", primerosLibrosDeNarracion[numero])

print("-----------------------------------------------------------------------\n")
  
################################################################################
#############Prueba de operaciones de TDA EscritorioDeAtencion##################
################################################################################

#######################cantidadDeEstanteriasCriticas###############################
print("\n\nCantidad de estanterias criticas en cada fila del depósito:\n")
for nroFila in range(nroFilas):
  print("Fila",nroFila,":",escritorioDeAtencion.cantidadDeEstanteriasCriticas(nroFila))  
print("-----------------------------------------------------------------------")

#########################estanteriaMenosRecargada###############################
print("\n\nEstantería menos recargada del depósito:\n")
print(escritorioDeAtencion.estanteriaMenosRecargada())  
print("-----------------------------------------------------------------------")

#########################buscaEstanteria########################################
print("\n\nUbicación de cada estantería en el depósito:\n")
for numero in estanteriasData:
  print("Número",numero,":",escritorioDeAtencion.buscaEstanteria(numero))  
print("-----------------------------------------------------------------------")

##########################moverLibro############################################
print("\n\nMovimiento de libros de la estantería 104 (fila 5) a la estantería 103 (fila 1):\n")
print("Cantidad de estanterías criticas en la fila 1 antes:",escritorioDeAtencion.cantidadDeEstanteriasCriticas(1))
print("Cantidad de estanterías criticas en la fila 5 antes:",escritorioDeAtencion.cantidadDeEstanteriasCriticas(5))

for libroData in estanteriasData[104][1]:
  codigo = libroData[0]
  escritorioDeAtencion.moverLibro(codigo,104,103)                               ###Comentar si usan TDA para codigo
  #escritorioDeAtencion.moverLibro(CodigoLibro(codigo[0:3],codigo[3:8]),104,103) ###Comentar si usan string para codigo

print("\nCantidad de estanterías criticas en la fila 1 despues:",escritorioDeAtencion.cantidadDeEstanteriasCriticas(1))
print("Cantidad de estanterías criticas en la fila 5 despues:",escritorioDeAtencion.cantidadDeEstanteriasCriticas(5))
print("-----------------------------------------------------------------------")